{"version":3,"sources":["Utils.js","language.js","components/tableHeader.jsx","components/tableBody.jsx","components/table.jsx","components/tooltip.jsx","App.js","serviceWorker.js","index.js"],"names":["moneyFormatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","penniesFormatter","percentFormatter","Util","percent","value","strNumber","toString","isNaN","parseFloat","substring","length","money","undefined","parseInt","replace","amount","showPennies","arguments","withSymbol","format","htmlContent","debt","payments","months","interest","phone","monthCount","lan","getPlural","number","word","one","other","month","year","Math","floor","result","push","en","es","ca","join","total","subtotal","str","index","indexOf","translations","monthtext","monthSingularText","monthPluralText","yearText","principalText","interestText","minimumPaymentText","principalPaidText","interestPaidText","remainingBalanceText","totalInterestText","calculateText","currentBalanceLabel","currentBalanceTooltip","aprLabel","aprTooltip","minimumPaymentLabel1","balancePercentageLabel","balancePercentageTooltip","balancePercentageOptionOne","minimumPaymentLabel2","minimumPaymentTooltip","debtFreeByText","totalAmountText","tableResultsTitle","requiredFieldError","balanceFieldError","balanceHelpText","orText","paymentText","andText","noteText","apiErrorText1","apiErrorText2","cautionText","disclaimerText","disclaimerText2","loadingText","goToPaymentScheduleText","paymentTypeLabel","paymentTypeLabelTooltip","paymentTypeMinim","paymentTypeFixed","fixedPaymentLabel","fixedPaymentDisclaimer","resultsMinimumPaymentHeader","resultsFixedPaymentHeader","resultsFixedPaymentContent","fr","TableHeader","_ref","columns","react_default","a","createElement","map","column","key","TableBody","data","row","Object","keys","columnKeyName","i","moneyValue","Table","className","tableHeader","tableBody","Tooltip","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hover","setState","onClick","handleTooltip","bind","onMouseOver","handleMouseInOut","onMouseOut","visibility","content","Component","App","handleOptionChange","event","target","tableResults","showResults","showTableResults","paymentType","languages","renderResults","assertThisInitialized","renderCard","currentBalance","currentBalanceEmpty","apr","aprEmpty","balancePercentage","minimumPayment","fixedPayment","tableColumns","tableFixedPaymentResults","debtManagementResults","phoneNumber","apiError","fixedApiError","loading","selector","scroller","scrollTo","duration","delay","offset","smooth","e","_this2","_e$target","name","val_percent","percentToValue","parsedValue","moneyToValue","auxForm","objectSpread","calculateMinimumPayment","_this3","_e$target2","parsed_value","defineProperty","_this$state","_this4","preventDefault","_this$state2","fixedPaymentAttr","apiUrl","checkInfinityPaymentUrl","paymentScheduleUrl","fixedPaymentScheduleUrl","debtManagementURL","axios","get","then","all","spread","paymentSchedule","debtManagement","fixedPaymentManagement","phones_found","document","getElementsByClassName","innerText","catch","console","log","error","success","_ref2","colors","_this$state3","results","payment","lastRow","today","Date","setMonth","getMonth","stringResult","getDateFromNumberOfMonths","translationsStringReplace","term","concat","totalInterest","role","_this$state4","params","cardBody","lastMessage","_this$state5","cardContent","btnLabel","btnUrl","openModal","phoneMessage","btn","href","data-toggle","defaultPayment","monthlyPayments","totalMonthlyPayment","totalPayment","totalAmountPaid","Parser","parseCardContent","numberOfMonths","totalInterestPaid","translation","newTranslation","forEach","__html","dangerouslySetInnerHTML","_this5","inputIconBalanceClasses","inputBalanceErrorClasses","inputBalanceTextErrorClasses","inputIconAPRClasses","inputAPRErrorClasses","inputAPRTextErrorClasses","_this$props","title","showCard","background","card_header_BgC","id","color","card_header_FontC","card_content_FontC","card_content_BgC","onSubmit","handleSubmit","htmlFor","tooltip","react_number_format_es","onChange","handleChange","placeholder","thousandSeparator","allowNegative","type","checked","changeFixedPayment","disabled","display","renderSpiner","renderFixedPaymentResults","setTimeout","table","Boolean","window","location","hostname","match","VTCCPayoffFixedPaymentCalculator","init","_ref$selector","_ref$title","_ref$lan","_ref$showCard","_ref$cardContent","_ref$colors","card_borderC","_ref$btnLabel","_ref$btnUrl","_ref$openModal","_ref$phoneNumber","_ref$phoneMessage","calculator","src_App_0","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33dbff03.chunk.js","sourcesContent":["var moneyFormatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n});\n\nvar penniesFormatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    /* minimumFractionDigits: 2,\n    maximumFractionDigits: 2,*/\n});\n\nvar percentFormatter = new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n});\n\nexport default class Util {\n    static percentToValue(percent) {\n        var value = percent;\n        var strNumber = value.toString();\n\n        if (isNaN(value) || value < 0) {\n            return '';\n        }\n        if(value >= 35){\n            return parseFloat( strNumber.substring(0, strNumber.length - 1) );\n        }\n        if(value < 35){\n            return strNumber.substring(0, 4);\n        }\n        return value;\n    }\n\n    static moneyToValue(money) {\n        if (money === undefined) return '';\n        var value = parseInt(money.replace(/\\D/g, \"\"));\n        return !isNaN(value) ? value : '';\n    }\n\n    static moneyValue(amount, showPennies = false, withSymbol = true) {\n        if (amount === null || amount === '') return '';\n        var value = showPennies ? penniesFormatter.format(amount) : moneyFormatter.format(amount);\n        if (withSymbol === false) {\n            return value.substring(1);\n        }\n        return value;\n    }\n\n    static percentValue(amount, withSymbol) {\n        if (amount === null || amount === '') return '';\n        var value = percentFormatter.format(amount);\n        if (withSymbol === false) {\n            return value.substring(0, value.length - 1);\n        }\n        return value;\n    }\n\n    static parseCardContent(htmlContent, debt='', payments='', money='', months='', interest='', phone=''){\n        return htmlContent\n                .replace('@debt', \"<span id='debt'>\"+debt+\"</span>\")\n                .replace('@payments', \"<span id='debt_res'>\"+payments+\"</span>\")\n                .replace('@money', \"<span id='money_res'>$\"+money+\"</span>\")\n                .replace('@months', \"<span id='months_res'>\"+months+\"</span>\")\n                .replace('@interest', \"<span id='interest_res'>\"+interest+\"</span>\")\n                .replace('@phone', \"<a class='no-tracking-phone-click' href='tel: \"+phone+\"'><span itemprop='telephone' class='tracking-phone'>\"+phone+\"</span></a>\");\n    }\n\n    static getDateFromNumberOfMonths(monthCount, lan) {\n        function getPlural(number, word) {\n            return (number === 1) ? word.one : word.other;\n        }\n\n        const months = {\n            en:{\n                one: 'month',\n                other: 'months',\n            },\n            es:{\n                one: 'mes',\n                other: 'meses',\n            },\n            ca:{\n                one: 'month',\n                other: 'months',\n            },\n        };\n        const years = {\n            en:{\n                one: 'year',\n                other: 'years',\n            },\n            es:{\n                one: 'año',\n                other: 'años',\n            },\n            ca:{\n                one: 'year',\n                other: 'years',\n            },\n        };\n        const and = {\n            en: ' and ',\n            es: ' y ',\n            ca: ' and ',\n        };\n\n        let month = monthCount % 12;\n        let year = Math.floor(monthCount / 12);\n        let result = [];\n\n        year && result.push(year + ' ' + getPlural(year, years[lan]));\n        month && result.push(month + ' ' + getPlural(month, months[lan]));\n\n        return result.join(and[lan]);\n    }\n\n    static calculatePercent(total, subtotal){\n        let perc = '';\n        if(isNaN(total) || isNaN(subtotal)){\n            perc=' ';\n        }else{\n           perc = Math.floor( (subtotal/total) * 100 );\n        }\n\n        return perc;\n    }\n\n    static countDecimalPlaces(number) {\n        const str = \"\" + number;\n        const index = str.indexOf('.');\n        if (index >= 0) {\n            return str.length - index - 1;\n        } else {\n            return 0;\n        }\n    }\n\n}\n","const translations = {\n    en : {\n        monthtext: 'Months',\n        monthSingularText: 'month',\n        monthPluralText: 'months',\n        yearText: 'year',\n        month : ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        principalText: 'Principle',\n        interestText: 'Interest',\n        minimumPaymentText: 'Minimum Payment',\n        principalPaidText: 'Principle Paid',\n        interestPaidText: 'Interest Paid',\n        remainingBalanceText: 'Remaining Balance',\n        totalInterestText: 'Total Interest',\n        calculateText: 'Calculate',\n        currentBalanceLabel : 'What is your credit card balance?',\n        currentBalanceTooltip: 'Enter the current balance from each of your credit cards one at a time. You can find the current balance on your most recent credit card statement.',\n        aprLabel: 'APR (annual percentage rate)',\n        aprTooltip: 'Enter the current APR for purchases from that card; this information will also be listed on your most current credit card statement.',\n        minimumPaymentLabel1: 'How is your minimum payment calculated?',\n        balancePercentageLabel: 'Percentage of Balance',\n        balancePercentageTooltip: 'Minimum payment requirements are calculated as a percentage of what you owe. The calculation should be listed on your original credit card agreement or you can simply use the default option of 3%, which is standard for most cards.',\n        balancePercentageOptionOne: 'Interest + 1% of balance',\n        minimumPaymentLabel2: 'Next Minimum Payment is',\n        minimumPaymentTooltip: 'Minimum payments increase or decrease based on your balance. So, as you pay off credit card balances, the minimum payment requirement will gradually decrease over time.',\n        debtFreeByText: 'You’ll be debt-free by',\n        totalAmountText: 'Total amount you’ll pay (including interest)',\n        tableResultsTitle: 'Payment Schedule',\n        requiredFieldError: 'This field is required.',\n        balanceFieldError: 'Insert a number between 1 and 1 million.',\n        balanceHelpText: 'Numeric values only, dots and commas will be removed.',\n        orText: 'or',\n        paymentText: 'payments',\n        andText: 'and',\n        noteText: 'NOTE',\n        apiErrorText1: 'If you make payments equal or under ',\n        apiErrorText2: ', you will never be able to pay your debt. Please change the values ​on the form to obtain a higher minimum payment.',\n        cautionText: 'CAUTION',\n        disclaimerText: 'Federal regulations require credit card issuers to disclose on your credit card statement how long it will take to pay off your estimated balance if you make minimum monthly payments. Estimates may be rounded up to the next $100. This debt calculator uses your actual credit card balance, so the results may vary from the estimate shown in your credit card statement.',\n        disclaimerText2: '* This estimate compares paying your credit card debt on your own vs. the potential benefit of using a Debt Management Plan through completion. IT\\'S NOT AN ACTUAL QUOTE. Estimate is based on 2.15% of your balance owed. Actual interest rates will vary by consumer and creditor – yours could be higher or lower. Consolidated Credit might be able to reduce your interest rates and late fees allowing you to pay off your credit card debt quicker (since more payments are applied to your principle balances, saving you lots of money in the long run). To complete the program, you must make on-time payments each month. Late or missed payments may cause your program to be cancelled and in that event, this estimate would not apply to you.',\n        loadingText: 'Loading...',\n        goToPaymentScheduleText: 'Show Payment Schedule',\n        paymentTypeLabel: 'Select a payment schedule based on:',\n        paymentTypeLabelTooltip: 'This is a set amount of money you are willing to spend each month to pay off your credit card, regardless of the amount owed. It must be greater than or equal to your first minimum monthly payment.',\n        paymentTypeMinim: 'Minimum payment',\n        paymentTypeFixed: 'Fixed payment',\n        fixedPaymentLabel: 'Fixed monthly payment:',\n        fixedPaymentDisclaimer: '*Your fixed payment must be greater than or equal to your first minimum monthly payment and no grater than $10000*',\n        resultsMinimumPaymentHeader: \"With a minimum payment\",\n        resultsFixedPaymentHeader: 'With a fixed payment:',\n        resultsFixedPaymentContent: 'It will take you ##term## to be rid of your debt. In that time, you will pay: ##amount## in interest',\n    },\n    es : {\n        monthtext: 'Meses',\n        monthSingularText: 'mes',\n        monthPluralText: 'meses',\n        yearText: 'año',\n        month : ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octuber', 'Noviembre', 'Diciembre'],\n        principalText: 'Principle',\n        interestText: 'Intereses',\n        minimumPaymentText: 'Pago Mínimo',\n        principalPaidText: 'Capital Pagado',\n        interestPaidText: 'Intereses Pagados',\n        remainingBalanceText: 'Balance Restante',\n        totalInterestText: 'Interés Total',\n        calculateText: 'Calcular',\n        currentBalanceLabel : '¿Cuál es el saldo de su tarjeta de crédito?',\n        currentBalanceTooltip: 'Esta es la cantidad total que se debe actualmente en su tarjeta de crédito. Esto se puede encontrar en el estado de cuenta de su tarjeta de crédito más reciente.',\n        aprLabel: 'APR (tasa de porcentaje anual) ',\n        aprTooltip: 'Esta es la Tasa de Interés Anual que paga en su tarjeta de crédito. Esto se puede encontrar en el estado de cuenta de su tarjeta de crédito.',\n        minimumPaymentLabel1: '¿Cómo será calculado su pago mínimo?',\n        balancePercentageLabel: 'Porcentaje de saldo',\n        balancePercentageTooltip: 'El cálculo del pago mínimo mensual es el porcentaje o la fórmula utilizada para determinar el pago mínimo solicitado en su factura de tarjeta de crédito cada mes. Este cálculo debe especificarse en su contrato de Acuerdo de Tarjeta de Crédito y / o en su estado de cuenta de tarjeta de crédito.',\n        balancePercentageOptionOne: 'Interés + el 1% del balance',\n        minimumPaymentLabel2: 'El próximo pago mínimo es',\n        minimumPaymentTooltip: 'Los pagos mínimos aumentan o disminuyen en función de su saldo. Por lo tanto, a medida que paga los saldos de las tarjetas de crédito, el requisito de pago mínimo disminuirá gradualmente con el tiempo.',\n        debtFreeByText: 'Estarás libre de deudas en',\n        totalAmountText: 'Cantidad total que pagará (incluidos los intereses)',\n        tableResultsTitle: 'Calendario de Pagos',\n        requiredFieldError: 'Este campo es requerido.',\n        balanceFieldError: 'Inserte un número mayor que 0 y menor que 1 millón.',\n        balanceHelpText: 'Los puntos y las comas serán eliminados',\n        orText: 'o',\n        paymentText: 'pagos',\n        andText: 'y',\n        noteText: 'NOTA',\n        apiErrorText1: 'Si realiza pagos menores que ',\n        apiErrorText2: ', nunca podrá pagar su deuda. Para obtener un Pago Mínimo más alto, debe cambiar los valores en el formulario.',\n        cautionText: 'ADVERTENCIA',\n        disclaimerText: 'Las regulaciones federales requieren que los emisores de tarjetas de crédito divulguen en su estado de cuenta de la tarjeta de crédito cuanto tiempo tomará para pagar su saldo estimado si hace los pagos mensuales mínimos. Las estimaciones se pueden redondear hasta los próximos $100. Esta calculadora de deudas usa su balance de tarjeta de crédito actual, así que los resultados pueden variar de los estimados mostrados en su estado de cuenta de tarjeta de crédito.',\n        disclaimerText2: '* Este cálculo compara el pago de su deuda de tarjeta de crédito por su cuenta frente al beneficio potencial de utilizar un Plan de gestión de deuda hasta su finalización. NO ES UNA CITA REAL. La estimación se basa en el 2.15% de su saldo adeudado. Las tasas de interés reales variarán según el consumidor y el acreedor; el suyo podría ser mayor o menor. Consolidated Credit podría reducir sus tasas de interés y cargos por pagos atrasados, lo que le permite cancelar su deuda de tarjeta de crédito más rápidamente (ya que se aplican más pagos a sus saldos de principle, lo que le ahorra mucho dinero a largo plazo). Para completar el programa, debe hacer pagos puntuales cada mes. Los pagos atrasados o perdidos pueden causar que su programa sea cancelado y en ese caso, este estimado no se aplica a usted.',\n        loadingText: 'Cargando...',\n        goToPaymentScheduleText: 'Vea el Calendario de Pagos',\n        paymentTypeLabel: 'Seleccione un calendario de pagos basado en:',\n        paymentTypeLabelTooltip: 'Esta es una cantidad fija de dinero que está dispuesto a gastar cada mes para pagar su tarjeta de crédito, independientemente de la cantidad que se debe. Debe ser mayor o igual que su primer pago mensual mínimo.',\n        paymentTypeMinim: 'Pago mínimo solamente',\n        paymentTypeFixed: 'Pagos fijos',\n        fixedPaymentLabel: 'Primer pago mensual:',\n        fixedPaymentDisclaimer: '*Su pago mensual fijo debe de ser mayor o igual a su primer pago mensual mínimo y mayor de $10000*',\n        resultsMinimumPaymentHeader: \"Con un pago mínimo\",\n        resultsFixedPaymentHeader: 'Con un pago fijo de:',\n        resultsFixedPaymentContent: 'Le llevará ##term## deshacerse de su deuda. En ese tiempo, Ud. pagará: ##amount## En intereses.',\n    },\n    ca : {\n        monthtext: 'Months',\n        monthSingularText: 'month',\n        monthPluralText: 'months',\n        yearText: 'year',\n        month : ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        principalText: 'Principle',\n        interestText: 'Interest',\n        minimumPaymentText: 'Minimum Payment',\n        principalPaidText: 'Principle Paid',\n        interestPaidText: 'Interest Paid',\n        remainingBalanceText: 'Remaining Balance',\n        totalInterestText: 'Total Interest',\n        calculateText: 'Calculate',\n        currentBalanceLabel : 'What is your credit card balance?',\n        currentBalanceTooltip: 'Enter the current balance from each of your credit cards one at a time. You can find the current balance on your most recent credit card statement.',\n        aprLabel: 'APR (annual percentage rate)',\n        aprTooltip: 'Enter the current APR for purchases from that card; this information will also be listed on your most current credit card statement.',\n        minimumPaymentLabel1: 'How is your minimum payment calculated?',\n        balancePercentageLabel: 'Percentage of Balance',\n        balancePercentageTooltip: 'Minimum payment requirements are calculated as a percentage of what you owe. The calculation should be listed on your original credit card agreement or you can simply use the default option of 3%, which is standard for most cards.',\n        balancePercentageOptionOne: 'Interest + 1% of balance',\n        minimumPaymentLabel2: 'Next Minimum Payment is',\n        minimumPaymentTooltip: 'Minimum payments increase or decrease based on your balance. So, as you pay off credit card balances, the minimum payment requirement will gradually decrease over time.',\n        debtFreeByText: 'You’ll be debt-free by',\n        totalAmountText: 'Total amount you’ll pay (including interest)',\n        tableResultsTitle: 'Payment Schedule',\n        requiredFieldError: 'This field is required.',\n        balanceFieldError: 'Insert a number between 1 and 1 million.',\n        balanceHelpText: 'Dots and commas will be removed.',\n        orText: 'or',\n        paymentText: 'payments',\n        andText: 'and',\n        noteText: 'NOTE',\n        apiErrorText1: 'If you make payments equal or under ',\n        apiErrorText2: ', you will never be able to pay your debt. Please change the values ​on the form to obtain a higher minimum payment.',\n        cautionText: 'CAUTION',\n        disclaimerText: 'Federal regulations require credit card issuers to disclose on your credit card statement how long it will take to pay off your estimated balance if you make minimum monthly payments. Estimates may be rounded up to the next $100. This debt calculator uses your actual credit card balance, so the results may vary from the estimate shown in your credit card statement.',\n        disclaimerText2: '* This estimate compares paying your credit card debt on your own vs. the potential benefit of using a Debt Management Plan through completion. IT\\'S NOT AN ACTUAL QUOTE. Estimate is based on 2.5% of your balance owed. Actual interest rates will vary by consumer and creditor – yours could be higher or lower. Consolidated Credit might be able to reduce your interest rates and late fees allowing you to pay off your credit card debt quicker (since more payments are applied to your principle balances, saving you lots of money in the long run). To complete the program, you must make on-time payments each month. Late or missed payments may cause your program to be cancelled and in that event, this estimate would not apply to you.',\n        loadingText: 'Loading...',\n        goToPaymentScheduleText: 'Show Payment Schedule',\n        paymentTypeLabel: 'Select a payment schedule based on:',\n        paymentTypeLabelTooltip: 'This is a set amount of money you are willing to spend each month to pay off your credit card, regardless of the amount owed. It must be greater than or equal to your first minimum monthly payment.',\n        paymentTypeMinim: 'Minimum payment',\n        paymentTypeFixed: 'Fixed payment',\n        fixedPaymentLabel: 'Fixed monthly payment:',\n        fixedPaymentDisclaimer: '*Your fixed payment must be greater than or equal to your first minimum monthly payment and no grater than $10000*',\n        resultsMinimumPaymentHeader: \"With a minimum payment\",\n        resultsFixedPaymentHeader: 'With a fixed payment:',\n        resultsFixedPaymentContent: 'It will take you ##term## to be rid of your debt. In that time, you will pay: ##amount## in interest',\n    },\n    fr : {\n        monthtext: 'Months',\n        monthSingularText: 'month',\n        monthPluralText: 'months',\n        yearText: 'year',\n        month : ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        principalText: 'Principle',\n        interestText: 'Interest',\n        minimumPaymentText: 'Minimum Payment',\n        principalPaidText: 'Principle Paid',\n        interestPaidText: 'Interest Paid',\n        remainingBalanceText: 'Remaining Balance',\n        totalInterestText: 'Total Interest',\n        calculateText: 'Calculate',\n        currentBalanceLabel : 'What is your credit card balance?',\n        currentBalanceTooltip: 'Enter the current balance from each of your credit cards one at a time. You can find the current balance on your most recent credit card statement.',\n        aprLabel: 'APR (annual percentage rate)',\n        aprTooltip: 'Enter the current APR for purchases from that card; this information will also be listed on your most current credit card statement.',\n        minimumPaymentLabel1: 'How is your minimum payment calculated?',\n        balancePercentageLabel: 'Percentage of Balance',\n        balancePercentageTooltip: 'Minimum payment requirements are calculated as a percentage of what you owe. The calculation should be listed on your original credit card agreement or you can simply use the default option of 3%, which is standard for most cards.',\n        balancePercentageOptionOne: 'Intérêts + 1% du solde',\n        minimumPaymentLabel2: 'Next Minimum Payment is',\n        minimumPaymentTooltip: 'Minimum payments increase or decrease based on your balance. So, as you pay off credit card balances, the minimum payment requirement will gradually decrease over time.',\n        debtFreeByText: 'You’ll be debt-free by',\n        totalAmountText: 'Total amount you’ll pay (including interest)',\n        tableResultsTitle: 'Payment Schedule',\n        requiredFieldError: 'This field is required.',\n        balanceFieldError: 'This field is required and must be a number greater than 0',\n        balanceHelpText: 'Dots and commas will be removed.',\n        orText: 'or',\n        paymentText: 'payments',\n        andText: 'and',\n        noteText: 'NOTE',\n        apiErrorText1: 'If you make payments equal or under ',\n        apiErrorText2: ', you will never be able to pay your debt. Please change the values ​on the form to obtain a higher minimum payment.',\n        cautionText: 'CAUTION',\n        disclaimerText: 'Federal regulations require credit card issuers to disclose on your credit card statement how long it will take to pay off your estimated balance if you make minimum monthly payments. Estimates may be rounded up to the next $100. This debt calculator uses your actual credit card balance, so the results may vary from the estimate shown in your credit card statement.',\n        disclaimerText2: '* This estimate compares paying your credit card debt on your own vs. the potential benefit of using a Debt Management Plan through completion. IT\\'S NOT AN ACTUAL QUOTE. Estimate is based on 2.5% of your balance owed. Actual interest rates will vary by consumer and creditor – yours could be higher or lower. Consolidated Credit might be able to reduce your interest rates and late fees allowing you to pay off your credit card debt quicker (since more payments are applied to your principle balances, saving you lots of money in the long run). To complete the program, you must make on-time payments each month. Late or missed payments may cause your program to be cancelled and in that event, this estimate would not apply to you.',\n        loadingText: 'Loading...',\n        goToPaymentScheduleText: 'Show Payment Schedule',\n        paymentTypeLabel: 'Select a payment schedule based on:',\n        paymentTypeLabelTooltip: 'This is a set amount of money you are willing to spend each month to pay off your credit card, regardless of the amount owed. It must be greater than or equal to your first minimum monthly payment.',\n        paymentTypeMinim: 'Minimum payment',\n        paymentTypeFixed: 'Fixed payment',\n        fixedPaymentLabel: 'Fixed monthly payment:',\n        fixedPaymentDisclaimer: '*Your fixed payment must be greater than or equal to your first minimum monthly payment and no grater than $10000*',\n        resultsMinimumPaymentHeader: \"Avec un paiement minimum\",\n        resultsFixedPaymentHeader: 'With a fixed payment:',\n        resultsFixedPaymentContent: 'It will take you ##term## to be rid of your debt. In that time, you will pay: ##amount## in interest',\n    },\n\n};\n\nexport default function getTranslations(lan) {\n    return translations[lan];\n}\n","import React from \"react\";\n\nconst TableHeader = ({columns}) => {\n  return (\n    <thead>\n      <tr>\n        { columns.map(column => <th key={column}>{column}</th>) }\n      </tr>\n    </thead>\n  );\n}\n\nexport default TableHeader;\n","import React from \"react\";\nimport Util from '../Utils'\n\nconst TableBody = ({data}) => {\n    return (\n        <tbody>\n        {data.map((row, index) => (\n            <tr key={index + '_row'}>\n                {Object.keys(row).map((columnKeyName, i) => (\n                    <td key={index + '_' + i + 'cell'}>\n                        { columnKeyName === 'month' ? row[columnKeyName] : Util.moneyValue(row[columnKeyName], true)}\n                    </td>\n                ))}\n            </tr>\n        ))}\n        </tbody>\n    );\n}\n\nexport default TableBody;\n","import React from \"react\";\nimport TableHeader from \"./tableHeader.jsx\";\nimport TableBody from \"./tableBody.jsx\";\n\nconst Table = ({ columns, data }) => {\n  return (\n    <table className=\"table table-bordered table-hover\">\n      <TableHeader columns={columns}/>\n      <TableBody data={data} />\n    </table>\n  );\n};\n\nexport default Table;","import React, { Component } from 'react';\n\nclass Tooltip extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = { hover: false }\n    }\n\n    handleMouseInOut() {\n        this.setState({ hover: !this.state.hover })\n    }\n\n    handleTooltip() {\n        this.setState({ hover: !this.state.hover })\n    }\n\n    render() {\n        return(\n            <div className=\"tooltipContainer\">\n                <div\n                    className='helpMiniDisk'\n                    onClick={this.handleTooltip.bind(this)}\n                    onMouseOver={this.handleMouseInOut.bind(this)}\n                    onMouseOut={this.handleMouseInOut.bind(this)}\n                >?</div>\n                <div className=\"customTooltip\" style={{visibility: this.state.hover ? 'visible' : 'hidden' }}>{this.props.content}</div>\n            </div>\n        )\n    }\n}\nexport default Tooltip;\n","import React, { Component } from 'react'\nimport Parser from 'html-react-parser'\nimport axios from 'axios'\nimport Util from './Utils'\nimport getTranslations from './language'\nimport Table from './components/table.jsx'\nimport Tooltip from './components/tooltip.jsx'\nimport NumberFormat from 'react-number-format';\nimport { scroller } from 'react-scroll'\n\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const languages = getTranslations(props.lan);\n        this.renderResults = this.renderResults.bind(this);\n\n        this.renderCard = this.renderCard.bind(this);\n        this.state = {\n            lan : props.lan,\n            currentBalance : '',\n            currentBalanceEmpty : 0,\n            apr: 1,\n            aprEmpty : 0,\n            balancePercentage : 3,\n            minimumPayment : '',\n            fixedPayment: '',\n            translations : languages,\n            showResults : false,\n            showTableResults: false,\n            tableColumns : [\n                languages.monthtext,\n                languages.minimumPaymentText,\n                languages.principalPaidText,\n                languages.interestPaidText,\n                languages.remainingBalanceText,\n                languages.totalInterestText,\n            ],\n            tableResults : [],\n            tableFixedPaymentResults: [],\n            debtManagementResults : [],\n            phoneNumber : props.phoneNumber,\n            apiError : false,\n            fixedApiError: false,\n            loading: false,\n            paymentType: 'minim'\n        };\n    }//End of Constructor\n\n    scrollTo(selector) {\n        scroller.scrollTo(selector, {\n            duration: 800,\n            delay: 0,\n            offset: -100,\n            smooth: 'easeInOutQuart',\n        })\n    }\n\n    handleChange (e) {\n        const {name, value} = e.target;\n\n        const val_percent = (name === 'apr') ? Util.percentToValue(value) : value;\n        const parsedValue = (name === 'currentBalance' || name === 'fixedPayment') ? Util.moneyToValue(val_percent, true) : val_percent;\n\n\n        let auxForm = {...this.state};\n        auxForm[name] = parsedValue;\n\n        auxForm.tableResults = [];\n        auxForm.showResults = false;\n        auxForm.showTableResults = false;\n\n        this.setState(auxForm, () => { this.calculateMinimumPayment() } );\n    }\n\n    changeFixedPayment(e) {\n        const {name, value} = e.target;\n        const parsed_value = value.replace(/\\,/g, \"\");\n\n        this.setState({\n            tableResults: [],\n            showResults: false,\n            showTableResults: false,\n            [name]: parseFloat(parsed_value)\n        }, () => { this.calculateMinimumPayment() } );\n    }\n\n\n    calculateMinimumPayment(){\n        const { currentBalance, balancePercentage } = this.state;\n        const result = (currentBalance * balancePercentage / 100);\n\n        this.setState({minimumPayment : result});\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        const {currentBalance, apr, balancePercentage, minimumPayment, fixedPayment, paymentType} = this.state;\n\n        if(!minimumPayment){\n            return;\n        }\n\n        let fixedPaymentAttr = 25;\n\n        if (paymentType === 'fixed') {\n            fixedPaymentAttr = fixedPayment;\n        }\n\n        const apiUrl = 'https://calculator-api-bk.debt.com/api/v1';\n        let checkInfinityPaymentUrl = apiUrl + '/validatePayments/' + currentBalance + '/' + apr + '/' + balancePercentage + '/' + 25;\n        const paymentScheduleUrl = apiUrl + '/getPayments/' + currentBalance + '/' + apr + '/' + balancePercentage + '/' + 25;\n        const fixedPaymentScheduleUrl = apiUrl + '/getPayments/' + currentBalance + '/' + apr + '/' + balancePercentage + '/' + fixedPaymentAttr;\n\n        const debtManagementURL = apiUrl + '/debtmanagement/'+ currentBalance + '/8/1';\n\n        this.setState({loading : true}, ()=>{\n            axios.get(checkInfinityPaymentUrl)\n                .then(({data}) => {\n\n                    if(!data.payments){\n                        this.setState({\n                            tableResults: [],\n                            tableFixedPaymentResults: [],\n                            debtManagementResults: [],\n                            showResults: true,\n                            apiError: true,\n                            loading : false\n                        });\n                    }\n                    else {\n                        axios.all([\n                            axios.get(paymentScheduleUrl),\n                            axios.get(debtManagementURL),\n                            axios.get(fixedPaymentScheduleUrl),\n                        ])\n                        .then(axios.spread((paymentSchedule, debtManagement, fixedPaymentManagement) => {\n\n                            let phones_found = this.state.phoneNumber;\n                            if(document.getElementsByClassName('tracking-phone').length){\n                                phones_found = document.getElementsByClassName('tracking-phone')[0].innerText;\n                            }else{\n                                if(document.getElementsByClassName('ShowPhoneNumber').length){\n                                    phones_found = document.getElementsByClassName('ShowPhoneNumber')[0].innerText;\n                                }\n                            }\n                            if(document.getElementsByClassName('notracking-phone-click').length){\n                                phones_found = document.getElementsByClassName('notracking-phone-click')[0].innerText;\n                            }\n\n                            this.setState({\n                                tableResults: paymentSchedule.data,\n                                debtManagementResults: debtManagement.data,\n                                tableFixedPaymentResults: fixedPaymentManagement.data,\n                                showResults: true,\n                                apiError: false,\n                                loading : false,\n                                phoneNumber: phones_found\n                            });\n\n                        }))\n                        .catch((e) => {\n                            //In case of Ex.: \"Non Reachable Server\"\n                            console.log(e);\n                            this.setState({ tableResults: [], debtManagementResults: [], showResults: false, loading : false });\n                        });\n                    }\n\n                })\n                .catch((error) => {\n                    console.log(error);\n                    this.setState({ tableResults: [], debtManagementResults: [], showResults: false, loading : false });\n                    return { success: false };\n                });\n\n            checkInfinityPaymentUrl = apiUrl + '/validatePayments/' + currentBalance + '/' + apr + '/' + balancePercentage + '/' + fixedPaymentAttr;\n\n            if (paymentType === 'fixed') {\n                axios.get(checkInfinityPaymentUrl)\n                    .then(({data}) => {\n\n                        if (!data.payments) {\n                            this.setState({\n                                tableResults: [],\n                                tableFixedPaymentResults: [],\n                                debtManagementResults: [],\n                                showResults: true,\n                                fixedApiError: true,\n                                loading: false\n                            });\n                        } else {\n                            axios.all([\n                                axios.get(debtManagementURL),\n                                axios.get(fixedPaymentScheduleUrl),\n                            ])\n                                .then(axios.spread((debtManagement, fixedPaymentManagement) => {\n\n                                    let phones_found = this.state.phoneNumber;\n                                    if(document.getElementsByClassName('tracking-phone').length){\n                                        phones_found = document.getElementsByClassName('tracking-phone')[0].innerText;\n                                    }else{\n                                        if(document.getElementsByClassName('ShowPhoneNumber').length){\n                                            phones_found = document.getElementsByClassName('ShowPhoneNumber')[0].innerText;\n                                        }\n                                    }\n                                    if(document.getElementsByClassName('notracking-phone-click').length){\n                                        phones_found = document.getElementsByClassName('notracking-phone-click')[0].innerText;\n                                    }\n\n                                    this.setState({\n                                        debtManagementResults: debtManagement.data,\n                                        tableFixedPaymentResults: fixedPaymentManagement.data,\n                                        showResults: true,\n                                        fixedApiError: false,\n                                        loading: false,\n                                        phoneNumber: phones_found\n                                    });\n\n                                }))\n                                .catch((e) => {\n                                    //In case of Ex.: \"Non Reachable Server\"\n                                    console.log(e);\n                                    this.setState({debtManagementResults: [], showResults: false, loading: false});\n                                });\n                        }\n\n                    })\n                    .catch((error) => {\n                        console.log(error);\n                        this.setState({\n                            tableResults: [],\n                            debtManagementResults: [],\n                            showResults: false,\n                            loading: false\n                        });\n                        return {success: false};\n                    });\n            }\n\n            this.scrollTo('ccpayoffResults');\n        });\n    }\n\n    renderResults(colors){\n        const {lan, tableResults, translations, minimumPayment, apiError, loading} = this.state;\n        let results = '';\n\n        let payment = minimumPayment;\n\n        if(tableResults.length){\n            const lastRow = tableResults[ tableResults.length - 1 ];\n            const months = lastRow.month;\n\n            let today = new Date();\n            today.setMonth(today.getMonth() + months);\n\n            let stringResult = Util.getDateFromNumberOfMonths(months, lan);\n            stringResult += ' ('+months+' '+translations.paymentText+')';\n\n            results = (\n                <div>\n                    <h5>{translations.resultsMinimumPaymentHeader}</h5>\n                    <div>{this.translationsStringReplace({\n                        'term': `<span class=\"months-amount\">${stringResult}</span>`,\n                        'amount': `<div class=\"payment-amount\">${Util.moneyValue(lastRow.totalInterest, true)}</div>`\n                    }, translations.resultsFixedPaymentContent)}</div>\n                </div>\n            );\n        }\n        else {\n            if(apiError){\n                results = !loading && (\n                    <div className=\"alert alert-warning shadowBox\" role=\"alert\">\n                        {translations.apiErrorText1}\n                        <strong>{Util.moneyValue(payment)}</strong>\n                        {translations.apiErrorText2}\n                    </div>\n                );\n            }\n        }\n\n        return results;\n    }\n\n    renderFixedPaymentResults() {\n        const {lan, tableFixedPaymentResults, translations, paymentType, fixedPayment, apiError, fixedApiError, loading} = this.state;\n        let results = '';\n\n        let payment = fixedPayment;\n\n        if (tableFixedPaymentResults.length){\n            const lastRow = tableFixedPaymentResults[ tableFixedPaymentResults.length - 1 ];\n            const months = lastRow.month;\n\n            let today = new Date();\n            today.setMonth(today.getMonth() + months);\n\n            let stringResult = Util.getDateFromNumberOfMonths(months, lan);\n            stringResult += ' ('+months+' '+translations.paymentText+')';\n\n            results = (\n                <div>\n                    <h5>{this.state.translations.resultsFixedPaymentHeader} <span className=\"monthly-payment\">{Util.moneyValue(payment, true)}</span></h5>\n                    <div>{this.translationsStringReplace({\n                        'term': `<span class=\"months-amount\">${stringResult}</span>`,\n                        'amount': `<div class=\"payment-amount\">${Util.moneyValue(lastRow.totalInterest, true)}</div>`\n                    }, translations.resultsFixedPaymentContent)}</div>\n                </div>\n            );\n        }\n        else {\n            if (apiError && fixedApiError && paymentType === 'fixed') {\n                return false;\n            }\n            if (fixedApiError){\n                results = !loading && (\n                    <div className=\"alert alert-warning shadowBox\" role=\"alert\">\n                        {translations.apiErrorText1}\n                        <strong>{Util.moneyValue(payment)}</strong>\n                        {translations.apiErrorText2}\n                    </div>\n                );\n            }\n        }\n\n        return results;\n    }\n\n    renderSpiner(){\n        return (\n            <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n        );\n    }\n\n    renderCard(params){\n        let cardBody = '';\n        let lastMessage = '';\n        const {currentBalance, debtManagementResults} = this.state;\n        const {cardContent, btnLabel, btnUrl, openModal, phoneMessage} = params;\n\n        let btn = '';\n        if(btnUrl !== '' && btnLabel !== ''){\n            btn = openModal ? <a href={btnUrl} data-toggle=\"modal\" className='btn btn-primary ctaCCPayOff'>{btnLabel}</a> : <a href={btnUrl} className='btn btn-primary ctaCCPayOff'>{btnLabel}</a>;\n        }\n\n        if(debtManagementResults.defaultPayment.length){\n            const monthlyPayments = Util.moneyValue(debtManagementResults.totalMonthlyPayment, true);\n            const totalPayment = Util.moneyValue(debtManagementResults.totalAmountPaid, true);\n            cardBody = Parser(Util.parseCardContent(cardContent, currentBalance, monthlyPayments, totalPayment, debtManagementResults.numberOfMonths, debtManagementResults.totalInterestPaid, this.state.phoneNumber));\n            lastMessage = Parser(Util.parseCardContent(phoneMessage, currentBalance, monthlyPayments, totalPayment, debtManagementResults.numberOfMonths, debtManagementResults.totalInterestPaid, this.state.phoneNumber));\n        }\n\n        const card = (\n            <div className=\"cardDidYouKnowContainer\">\n                { cardBody }\n                {btn}\n                <p>{lastMessage}</p>\n            </div>\n        );\n        return card;\n    }\n\n    handleOptionChange = (event) => {\n        const {value} = event.target;\n\n        this.setState({\n            tableResults: [],\n            showResults: false,\n            showTableResults: false,\n            paymentType: value\n        });\n    }\n\n    translationsStringReplace(keys, translation) {\n        let newTranslation = translation;\n        Object.keys(keys).forEach((key) =>  {\n            newTranslation = newTranslation.replace(`##${key}##`, keys[key])\n        });\n\n        let result = {__html: newTranslation};\n\n        return (<div dangerouslySetInnerHTML={result}></div>);\n    }\n\n\n    render() {\n        //Style's class initializations:\n        const inputIconBalanceError = (this.state.minimumPayment === 0 || this.state.currentBalance > 1000000) ? 'inputIconError' : '';\n        const inputIconBalanceClasses = 'input-group-text '+inputIconBalanceError;\n        const balanceHelpText = (this.state.minimumPayment===0 || this.state.currentBalance > 1000000) ? 'inputHelpText hide' : 'inputHelpText';\n        const inputBalanceError = (this.state.minimumPayment===0 || this.state.currentBalance > 1000000) ? 'inputError' : '';\n        const inputBalanceErrorClasses = 'form-control '+inputBalanceError;\n        const inputBalanceTextError = (this.state.minimumPayment===0 || this.state.currentBalance > 1000000) ? 'show' : 'hide';\n        const inputBalanceTextErrorClasses = 'inputErrorText '+inputBalanceTextError;\n\n        const inputIconAPRError = !this.state.apr ? 'inputIconError' : '';\n        const inputIconAPRClasses = 'input-group-text '+inputIconAPRError;\n        const inputAPRError = !this.state.apr ? 'inputError' : '';\n        const inputAPRErrorClasses = 'form-control '+inputAPRError;\n        const inputAPRTextError = !this.state.apr ? 'show' : 'hide';\n        const inputAPRTextErrorClasses = 'inputErrorText '+inputAPRTextError;\n\n        const {title, showCard, colors} = this.props;\n\n        return (\n            <div className=\"container ccpayoff-calculator-wrapper\">\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-lg-6\">\n\n                        <div className=\"card shadowBox\">\n                            <div className=\"card-header\" style={{background: colors.card_header_BgC }} role=\"tab\" id=\"heading-CCPayOff\">\n                                <h2 className=\"mb-0\" style={{color: colors.card_header_FontC}} >{title}</h2>\n                            </div>\n\n                            <div className=\"card-body\" style={{ color: colors.card_content_FontC, background: colors.card_content_BgC }}>\n                                {/* Form begins here */}\n                                <form id=\"credit-card-payoff-calculator\" className=\"\" onSubmit={this.handleSubmit.bind(this)} >\n\n                                    <div className=\"mb-3\">\n\n                                        <label htmlFor=\"current_balance\">\n                                            <Tooltip className=\"\" content={this.state.translations.currentBalanceTooltip} />\n                                            {this.state.translations.currentBalanceLabel}\n                                        </label>\n\n                                        <div className=\"input-group\">\n                                            <div className=\"input-group-prepend\">\n                                                <span className={inputIconBalanceClasses}>$</span>\n                                            </div>\n                                            <NumberFormat\n                                                className={inputBalanceErrorClasses}\n                                                name=\"currentBalance\"\n                                                id=\"current_balance\"\n                                                value={this.state.currentBalance}\n                                                onChange={this.handleChange.bind(this)}\n                                                placeholder=\"Ex: 1000\"\n                                                thousandSeparator={true}\n                                                allowNegative={false}\n                                            />\n                                        </div>\n                                        <small className={balanceHelpText}>{this.state.translations.balanceHelpText}</small>\n                                        <span className={inputBalanceTextErrorClasses}>{this.state.translations.balanceFieldError}</span>\n                                    </div>\n\n                                    <div className=\"mb-3\">\n                                        <label htmlFor=\"interest\" className=\"label-minimum-payment\">\n                                            <Tooltip content={this.state.translations.aprTooltip} />\n                                            {this.state.translations.aprLabel}\n                                        </label>\n                                        <div className=\"input-group\">\n                                            <input className={inputAPRErrorClasses} name=\"apr\" id=\"interest\" value={this.state.apr} onChange={this.handleChange.bind(this)} />\n                                            <div className=\"input-group-append\">\n                                                <span className={inputIconAPRClasses}>%</span>\n                                            </div>\n                                        </div>\n                                        <span className={inputAPRTextErrorClasses}>{this.state.translations.requiredFieldError}</span>\n                                    </div>\n\n                                    <div className=\"mb-3\">\n                                        <h4>{this.state.translations.minimumPaymentLabel1}</h4>\n\n                                        <fieldset className=\"fieldset-minimum\">\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"percentage_of_balance\" className=\"col-xs-10 offset-xs-2 control-label mt-2\">\n                                                    <Tooltip content={this.state.translations.balancePercentageTooltip} />\n                                                    {this.state.translations.balancePercentageLabel}\n                                                </label>\n\n                                                <div className=\"input-group\">\n                                                    <select className=\"form-control\" name=\"balancePercentage\" id=\"percentage_of_balance\" value={this.state.balancePercentage} onChange={this.handleChange.bind(this)} >\n                                                        <option value=\"1\">1</option>\n                                                        <option value=\"2\">2</option>\n                                                        <option value=\"2.5\">2.5</option>\n                                                        <option value=\"3\">3</option>\n                                                        <option value=\"3.5\">3.5</option>\n                                                        <option value=\"4\">4</option>\n                                                        <option value=\"4.5\">4.5</option>\n                                                        <option value=\"5\">5</option>\n                                                    </select>\n                                                    <div className=\"input-group-append\">\n                                                        <span className=\"input-group-text\">%</span>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <div className=\"form-group\">\n                                                { this.state.minimumPayment > 0 && (\n                                                    <div>\n                                                        <label htmlFor=\"minimum_dollar_amount\" className=\"col-xs-12 offset-xs-2 control-label mt-2\">\n                                                            <Tooltip content={this.state.translations.minimumPaymentTooltip} />\n                                                            {this.state.translations.minimumPaymentLabel2}:\n                                                        </label>\n\n                                                        <p className=\"number-populated\" id=\"minimum_payment\" >\n                                                            { Util.moneyValue(this.state.minimumPayment, true) }\n                                                        </p>\n                                                    </div>\n                                                )}\n\n                                                <input type=\"hidden\" value={this.state.minimumPayment} name=\"minimumPayment\" id=\"minimum_dollar_amount\" />\n                                            </div>\n                                        </fieldset>\n                                    </div>\n\n                                    <div className=\"mb-3\">\n                                        <label htmlFor=\"interest\" className=\"label-minimum-payment\">\n                                            {this.state.translations.paymentTypeLabel}\n                                        </label>\n                                        <div className=\"input-group radio-button\">\n                                            <div className=\"item payment-type\">\n                                                <label><input type=\"radio\" name=\"payment_type\" value=\"minim\" onChange={this.handleOptionChange} checked={this.state.paymentType === 'minim'}/>{this.state.translations.paymentTypeMinim}</label>\n                                                <label><input type=\"radio\" name=\"payment_type\" value=\"fixed\" onChange={this.handleOptionChange} checked={this.state.paymentType === 'fixed'}/>{this.state.translations.paymentTypeFixed}</label>\n                                            </div>\n                                        </div>\n                                        <span className={inputAPRTextErrorClasses}>{this.state.translations.requiredFieldError}</span>\n                                    </div>\n\n                                    {this.state.paymentType === 'fixed' && (\n                                        <div className=\"mb-3\">\n                                            <label htmlFor=\"interest\" className=\"label-minimum-payment\">\n                                                <Tooltip content={this.state.translations.paymentTypeLabelTooltip} />\n                                                {this.state.translations.fixedPaymentLabel}\n                                            </label>\n                                            <div className=\"input-group\">\n                                                <div className=\"input-group-prepend\">\n                                                    <span className={`input-group-text ${ this.state.fixedPayment < this.state.minimumPayment ? `inputIconError` : ``}`}>$</span>\n                                                </div>\n                                                <NumberFormat\n                                                    className={inputBalanceErrorClasses}\n                                                    name=\"fixedPayment\"\n                                                    id=\"fixed_payment\"\n                                                    value={this.state.fixedPayment}\n                                                    onChange={this.changeFixedPayment.bind(this)}\n                                                    placeholder=\"Ex: 1000\"\n                                                    thousandSeparator={true}\n                                                    allowNegative={false}\n                                                />\n                                            </div>\n                                            {this.state.fixedPayment < this.state.minimumPayment && (<div className=\"payment-type-fixed-disclaimer inputErrorText\">{this.state.translations.fixedPaymentDisclaimer}</div>)}\n                                        </div>\n                                    )}\n\n                                    <div className=\"mb-3\">\n                                        <button\n                                            type=\"submit\"\n                                            className=\"btn btn-primary\"\n                                            disabled={!this.state.minimumPayment || !this.state.apr || this.state.currentBalance > 1000000 || (\n                                                this.state.paymentType === 'fixed' && this.state.fixedPayment < this.state.minimumPayment\n                                            )}\n                                        >\n                                            { this.state.translations.calculateText }\n                                        </button>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id=\"ccpayoffResults\" className=\"col-lg-6 text-center rightResults\" style={{display: this.state.loading || this.state.showResults ? 'block' : 'none' }} >\n\n                        <div className=\"loader-spiner\" style={{display: this.state.loading ? 'block': 'none'}}>\n                            {this.renderSpiner()}\n\n                            <p>{this.state.translations.loadingText}</p>\n                        </div>\n\n                        <div className=\"minimum-payment-results\">\n                            {this.state.showResults && this.renderResults(colors)}\n                        </div>\n\n                        { this.state.showResults && this.state.paymentType === 'fixed' && this.state.fixedPayment > 0 && (\n                            <div className=\"fixed-payment-results\">\n                                {this.renderFixedPaymentResults()}\n                            </div>\n                        )}\n\n                        { (!this.state.apiError || (this.state.paymentType === 'fixed' && !this.state.fixedApiError && this.state.fixedPayment > 0)) && (<div className=\"scroll-to-table\">\n                            <a onClick={() => {\n                                this.setState({showTableResults: true}, () => {\n                                    setTimeout(() => {\n                                        this.scrollTo('paymentResults')\n                                    }, 300)\n                                });\n                            }}>\n                                {this.state.translations.goToPaymentScheduleText}\n                            </a>\n\n                            {showCard && !this.state.apiError && this.state.showTableResults && this.renderCard(this.props)}\n                        </div>)}\n\n                    </div>\n                </div>{/* End of row */}\n\n                { ((this.state.showTableResults && this.state.paymentType !== 'fixed') || (this.state.showResults && this.state.paymentType === 'fixed' && this.state.fixedPayment > 0)) && (\n                    <div className=\"row\">\n                        <div className=\"col-lg-12 mt-5\">\n\n                            {this.state.showTableResults && (\n                                <div id=\"paymentResults\" className=\"shadowBox paymentResults\">\n                                    <h3>{this.state.translations.tableResultsTitle}</h3>\n                                    <div className=\"table-responsive scrolling-table\">\n                                        <Table columns={this.state.tableColumns} data={this.state.paymentType === 'fixed' ? this.state.tableFixedPaymentResults : this.state.tableResults} />\n                                    </div>\n                                </div>\n                            )}\n\n                            <div className=\"txt_disclaimer\">\n                                <p><strong>{this.state.translations.noteText}: </strong>{this.state.translations.disclaimerText}</p>\n                                { showCard && (\n                                    <p>{this.state.translations.disclaimerText2}</p>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n            </div>/* we will replace this div by </React.Fragment> */\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// /*\n(function(window){\n    const _init = ({\n        selector = 'CCPayOff',\n        title = 'Credit  Calculator',\n        lan = 'en',\n        showCard = false,\n        cardContent = '',\n        colors = {\n            card_header_BgC: '#f7f7f7',\n            card_header_FontC: '#212121',\n            card_borderC: '#dfdfdf',\n            card_content_BgC: '#ffffff',\n            card_content_FontC: '#000000',\n        },\n        btnLabel = '',\n        btnUrl = '#LeadForm',\n        openModal = true,\n        phoneNumber = '1-800-320-9929',\n        phoneMessage = ''\n    })=>{\n        let calculator = (<App\n    title={title}\n    lan={lan}\n    showCard={showCard}\n    cardContent={cardContent}\n    colors={colors}\n    btnLabel={btnLabel}\n    btnUrl={btnUrl}\n    openModal={openModal}\n    phoneNumber={phoneNumber}\n    phoneMessage={phoneMessage}/>);\n        ReactDOM.render( calculator, document.getElementById(selector) );\n    }\n\n    window.VTCCPayoffFixedPaymentCalculator = { init: _init }\n})(window);\n\n// */\n/*\n    let title = 'Credit  Calculator',\n    lan = 'es',\n    showCard = true,\n    cardContent = \"<h2>Did You Know?</h2> <h3>There’s a Better Way to Get Out of Debt</h3> <p>As you can see, minimum payments are not an effective way to get out of debt. They’re costing you time and money that you can't afford to waste.</p> <p>With this amount of debt, you could pay around <strong>*@payments per month</strong> on a debt management program, and you could be out of debt in as little as <strong>@months payments</strong>. Paying a total of <strong>@money</strong> with <strong> @interest </strong> in debt. Call us today at <strong>@phone</strong> for free credit counseling to find a solution that will finally help you become debt free.</p>\",\n    colors = {\n        card_header_BgC: '#f7f7f7',\n        card_header_FontC: '#212121',\n        card_borderC: '#dfdfdf',\n        card_content_BgC: '#ffffff',\n        card_content_FontC: '#000000',\n    },\n    btnLabel = 'Call us now',\n    btnUrl = '#LeadForm',\n    openModal = true,\n    phoneNumber = '1-800-320-9929',\n    phoneMessage = '';\n\n    if (lan === 'es') {\n        cardContent = \"<h2>¿Sabía Usted Que?</h2> <h3>Hay una mejor manera para liberarse de las deudas</h3> <p>Como puedes ver, realizar pagos mínimos no es una forma efectiva para liberarse de las deudas. Hacer el pago mínimo solo te cuesta tiempo y dinero.</p> <p>Con esta cantidad de deuda, podrías pagar alrededor de <strong>*@payments al mes</strong> en un programa de manejo de deudas y <strong>podrías liberarte de las deudas tan pronto como en 36-60 pagos</strong>. Llámanos hoy al <strong>@phone</strong> para una sesión de consejería de crédito gratis que te ayudará a encontrar una solución que te permita liberarte de las deudas de una vez por todas.</p>\";\n        btnLabel = \"Podemos ayudarle\";\n    }\n\n    ReactDOM.render(<App\n        title={title}\n        lan={lan}\n        showCard={showCard}\n        cardContent={cardContent}\n        colors={colors}\n        btnLabel={btnLabel}\n        btnUrl={btnUrl}\n        openModal={openModal}\n        phoneNumber={phoneNumber}\n        phoneMessage={phoneMessage}\n     />, document.getElementById('root'));\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}